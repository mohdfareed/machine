name: Deploy Release

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Create a new release'
        default: false
        type: boolean
      increment:
        description: 'Version increment type'
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write
  pull-requests: write

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.resolver.outputs.version }}
      tag: v${{ steps.resolver.outputs.version }}

    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Set up environment
        uses: ./.github/setup

      - name: Get last version
        id: previous-tag
        uses: WyriHaximus/github-action-get-previous-tag@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Update version
        id: semver
        uses: WyriHaximus/github-action-next-semvers@master
        with:
          version: ${{ steps.previous-tag.outputs.tag }}

      - name: Resolve new version
        id: resolver
        run: |
          case ${{ github.event.inputs.increment }} in
            major)
            version=${{ steps.semver.outputs.major }} ;;
            minor)
            version=${{ steps.semver.outputs.minor }} ;;
            patch)
            version=${{ steps.semver.outputs.patch }} ;;
            esac
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Update project version
        id: update_version
        env:
          version: ${{ steps.resolver.outputs.version }}
        run: poetry version ${{ env.version }}

      - name: Update repository
        env:
          tag: v${{ steps.resolver.outputs.version }}
        run: |
          git add pyproject.toml
          git commit --no-verify -m "release: update project to ${{ env.tag }}" || exit 0
          git push
          echo "::notice::Updated project to ${{ env.tag }}"

  tag:
    runs-on: ubuntu-latest
    needs: [versioning]

    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Create tag
        env:
          tag: ${{ needs.versioning.outputs.tag }}
        run: |
          git pull
          git tag ${{ env.tag }}

      - name: Push tag
        env:
          tag: ${{ needs.versioning.outputs.tag }}
        run: git push origin ${{ env.tag }} --force

  build:
    runs-on: ubuntu-latest
    needs: [versioning]
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Set up environment
        uses: ./.github/setup

      - name: Build package
        run: |
          git pull
          poetry build

      - name: Create artifact
        uses: actions/upload-artifact@main
        with:
          name: machine-wheel
          path: dist/*.whl

  release:
    runs-on: ubuntu-latest
    needs: [build, tag, versioning]
    if: inputs.release == true

    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@main
        id: artifact
        with:
          name: machine-wheel

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@master
        with:
          files: ${{ steps.artifact.outputs.download-path }}/*.whl
          body_path: docs/cli.md
          generate_release_notes: true
          tag_name: ${{ needs.versioning.outputs.tag }}

      # Create link to release
      - name: Create release link
        env:
          tag: ${{ needs.versioning.outputs.tag }}
        run: |
          echo "- Release: ${{ env.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- Link: ${{ steps.create_release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
