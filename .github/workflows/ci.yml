name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Set up environment
        uses: ./.github/setup

      - name: Linter
        uses: dciborow/action-pylint@main
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: "true"
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-check
          reviewdog_flags: '-tee'

      - name: Type checker
        uses: jordemort/action-pyright@main
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: "true"
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-check
          reviewdog_flags: '-tee'

  hooks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Set up environment
        uses: ./.github/setup

      - name: Cache
        uses: actions/cache@main
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: pre-commit

      - name: Pre-commit hooks
        id: hooks
        run: |
          ./scripts/hooks.sh 2>&1 | tee pre-commit-output.txt
          echo "status=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT

      - name: Annotate
        run: |
          while IFS= read -r line; do
            if [[ $line == *"Failed"* ]]; then
              echo "::error::${line}"
            else
              echo "::notice::${line}"
            fi
          done < pre-commit-output.txt
          exit ${{ steps.hooks.outputs.status }}

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Set up environment
        uses: ./.github/setup

      - name: Build
        run: poetry build

      - name: Run
        run: poetry run machine-setup --help

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Set up environment
        uses: ./.github/setup

      - name: Run tests
        run: |
          set -o pipefail
          poetry run pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=app tests/ | tee pytest-coverage.txt
        continue-on-error: true

      - name: Generate coverage report
        id: coverage
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

      - name: Annotation
        run: |
          echo "::notice::coverage: ${{ steps.coverage.outputs.coverage }}"
          echo "::notice::tests: ${{ steps.coverage.outputs.tests }}"
          echo "::notice::skipped: ${{ steps.coverage.outputs.skipped }}"
          echo "::notice::time: ${{ steps.coverage.outputs.time }}s"
          if [ ${{ steps.coverage.outputs.warnings }} -gt 0 ]; then
            echo "::warning::warnings: ${{ steps.coverage.outputs.warnings }}"
          fi
          if [ ${{ steps.coverage.outputs.failures }} -gt 0 ]; then
            echo "::error::failures: ${{ steps.coverage.outputs.failures }}"
          fi
          if [ ${{ steps.coverage.outputs.errors }} -gt 0 ]; then
            echo "::error::errors: ${{ steps.coverage.outputs.errors }}"
          fi

  spelling:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0

      - uses: reviewdog/action-misspell@master
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-check
          level: warning
          locale: "US"
          exclude: |
              *.lock
