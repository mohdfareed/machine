# region - Configuration
# =============================================================================

# disable sessions
[ -f "$HOME/.hushlogin" ] || touch "$HOME/.hushlogin"

# history
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# endregion

# region - Environment
# =============================================================================

# homebrew
if [[ -f "/opt/homebrew/bin/brew" ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi # arm macos
if [[ -f "/usr/local/bin/brew" ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
fi # intel macos
if [[ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi # linux/wsl

# brew tools
if command -v brew 1>/dev/null 2>&1; then
    FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}" # completions
    export PATH="$(brew --prefix python)/libexec/bin:$PATH" # python

fi

# oh-my-posh theme
local theme="$(oh-my-posh cache path)/themes/pure.omp.json"
eval "$(oh-my-posh init zsh --config "$theme")"

# uv (python version manager)
if command -v uv 1>/dev/null 2>&1; then
    eval "$(uv generate-shell-completion zsh)"
    eval "$(uvx --generate-shell-completion zsh)"
fi

# dotnet completions, source:
# https://learn.microsoft.com/en-us/dotnet/core/tools/enable-tab-autocomplete
_dotnet_zsh_complete() {
    if [[ ! $(command -v dotnet) ]]; then
        return
    fi

    local completions=("$(dotnet complete "$words")")
    if [ -z "$completions" ]; then
        _arguments '*::arguments: _normal'
        return
    fi

    # this is not variable assignment, do not modify!
    _values = "${(ps:\n:)completions}"
}
# compdef _dotnet_zsh_complete dotnet (handled by zinit)

# endregion

# region - ZINIT (zsh plugin manager)
# =============================================================================
# examples: https://zdharma-continuum.github.io/zinit/wiki/GALLERY

# set up zinit
export ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
local repo="https://github.com/zdharma-continuum/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone $repo $ZINIT_HOME
source $ZINIT_HOME/zinit.zsh

# plugins
zinit light zdharma-continuum/zinit-annex-as-monitor # remote file updater
zinit light zdharma-continuum/zinit-annex-patch-dl # download with dl"URL file"

# syntax highlighting, autosuggestions, completions
zinit wait lucid light-mode for \
  atinit"zicompinit; zicdreplay; compdef _dotnet_zsh_complete dotnet" \
      zdharma-continuum/fast-syntax-highlighting \
  atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q .' \
      zsh-users/zsh-completions
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' \
'r:|[._-]=* r:|=* l:|=*' # case-insensitive completion, ignore dots and hyphens

# fzf (fuzzy finder)
zinit ice wait lucid as"program" from"gh-r" mv"fzf* -> fzf" pick"fzf" \
      atload"eval \"\$(fzf --zsh)\"" # key bindings for fzf (ctrl-t, ctrl-r)
zinit light junegunn/fzf

# fzf (fuzzy finder) tab completion
zinit ice wait lucid
zinit light Aloxaf/fzf-tab
zstyle ':completion:*:git-checkout:*' sort false
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
zstyle ':fzf-tab:*' switch-group '<' '>'
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
# source: https://github.com/Aloxaf/fzf-tab?tab=readme-ov-file#configure

# endregion

# region - Functions and Aliases # TODO: separate
# =============================================================================

alias zsh::reload='exec $SHELL'
alias ssh::gen-key='ssh-keygen -t ed25519 -C'

alias cat='bat --paging=never'
alias vim='nvim'

alias ls='eza --icons --group-directories-first --sort=Name'
alias lst='ls -T'
alias lls='ls -lhmU --git --no-user'
alias llst='lls -T'

if [ "$TERM_PROGRAM" = "vscode" ]; then
    alias clear='clear && clear'
fi

# copy ssh key to a new machine for the current user
ssh::copy() {
    usage="usage: $0 host [user]"
    if (($# < 1 || $# > 2)); then echo $usage && return 1; fi
    ssh-copy-id ${2-$USER}@$1
}

# time shell startup
zsh::time() {
    usage="usage: $0 [iterations]"
    if (($# > 1)); then echo $usage && return 1; fi
    for i in $(seq 1 ${1-1}); do time $SHELL -i -c exit; done
}

# load dotenv file as exported variables
env::load() {
    usage="usage: $0 [dotenv]"
    if (($# > 1)); then echo $usage && return 1; fi

    env=${1-.env}
    if [[ ! -f "$env" ]]; then
        echo "No dotenv file found"
        return 1
    fi
    source $env
}

# activate python virtual environment
venv::activate() {
    usage="usage: $0 [venv_dir]"
    if (($# > 1)); then echo $usage && return 1; fi

    venv=${1-.venv}
    if [[ ! -d "$venv" ]]; then
        echo "No virtual environment directory found"
        return 1
    fi
    source "$venv/bin/activate"
}

# endregion
